// NOTE : [slug] makes it such that this page is loaded on any route that is not captured by the other routes specified in the 'pages' parent directory. We're intending for this file to specify the Profile view.
import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";

const ProfilePage: NextPage<{ username: string }> = () => {
  const { data } = api.profile.getUserByUsername.useQuery({
    // no loading state because the page is fully rendered once delivered by the server. (See notes and comments on `getStaticProps` below)
    username: "jjquek",
  });
  if (!data) return <div>Something went wrong...</div>;
  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div>{data.username}</div>
      </main>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import superjson from "superjson";
import { prisma } from "~/server/db";
// note: not sure why it wasn't immediately being ported in via VSCode Intellisense.
export const getStaticProps: GetStaticProps = async (context) => {
  // We use getStaticProps because this is a page that (1) needs to fetch data, (2) won't change that frequently. The page is pre-rendered by next at build time such that when the user requests for the page, the page can be served fully rendered. There doesn't need to be more data fetching.
  const ssg = createServerSideHelpers({
    router: appRouter,
    // TODO : figure out why there's a userId included as a param?
    // userId is required by the type definition provided in this `createServerSideHelpers` function. We don't need any specific userId though so we're just stubbing it with null.
    ctx: { prisma, userId: null },
    transformer: superjson,
  });
  const slug = context.params?.slug;
  // TODO : refactor this-- should instead redirect to another page.
  if (typeof slug !== "string") throw new Error("no slug");
  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({ username });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

// note : required for use with getStaticProps
export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProfilePage;
